<!DOCTYPE html>
<html>
<head>
<!--  Integrator: Eric Matthews  -->
<!--  Integration into the zenyan framework  -->
<!--  Example: Using JQuery to create a simple custom image view    -->	
<!--  Credit:  Gareth Watts for this graphics api                   -->
<!--  I have kept the demo page pretty much as-is. There is a great amount of
flexibility with this api. What I like best is the ability to size and inline a
graph within a span tag. While we have a server-side graphing/chart api this
makes a very nice infrastructure to the framework. -->		
    <title>jQuery Sparklines</title>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta name="Description" content="Plugin for jQuery to generate sparkline charts directly in the web browser" />
    <style type="text/css">
        body { font-family: helvetica, arial, san-serif; background-color: #257; text-align: center; font-size: 0.9em; line-height: 1.2em}
        p, li { color: #333; }
        h1 { border-bottom: 1px solid #44a; margin-bottom: 30px; line-height: 1.0em}
        h1 span { border-bottom: 8px solid #44a; margin-bottom: 8px; }
        h2 { border-bottom: 1px solid #44a; line-height: 1.0em}
        h2 span { border-bottom: 4px solid #44a; margin-bottom: 8px; padding: 0px; }
        h3 { margin-top: 30px; }
        ul { margin-left: 0px; padding-left: 2em; }
        #container { background-color: white; width: 720px;  margin-left: auto; margin-right: auto; text-align: left; padding: 30px; border: 5px solid #146;}
        pre { border: 1px dotted gray; background-color: #def; margin-left: 20px; padding: 4px; margin-right: 20px; overflow: auto}
        #markets { float: right; width: 250px; height: 60px;  font-size: 0.7em; text-align: right; background-color: white;}
        #markets p { margin: 0px 0px 4px 0px; }
        .coptions { display: none; }
        #customize { padding: 15px; margin-left: 0px; border: 1px dashed black; font-size: 0.9em; background-color: #fafaff; position: relative}
        #customize h3 { text-align:  center; margin-top: 0px; margin-bottom: 5px; font-size: 1.0em}
        #customize ul { margin: 0px; list-style: none; }
        #customize li { padding-bottom: 5px; }
        #customize input { font-size: 0.9em; }
        #examples1 { float: right; width: 300px; font-size: 0.8em; background-color: #f8f8ff; margin: 5px 0px 15px 10px; padding: 0px; }
        #examples div { padding: 8px; }
        #examples { position: relative; margin-top: 50px; }
        #ex2 { float: right; width: 50%; position: relative}
        .typetitle { text-decoration: underline; }
        .section { display: none; clear: both}
        #footer { text-align: center; font-size: 0.7em; color: #777; clear: both; margin-top: 100px; }
        .docdemo { float: right; position: relative; line-height: 1.3em}
        #doctoc { float: right; position: relative; border-left: 1px solid gray; font-size: 0.9em; line-height: 1.2em}
        #doctoc a { text-decoration: none }
        #doctoc a:hover { text-decoration: underline }
        #customresult { text-align: center; font-size: 1.2em}
        #newversion { float: right; margin: 5px 0px 15px 15px; font-size: 0.8em; font-weight: bold; color: black; border: 1px solid red; background: #ff9; padding: 4px; text-align: center; }
            
    </style>
    <link rel="stylesheet" href="../jquery/stylesheet/ui.core.css"></link>
    <link rel="stylesheet" href="../jquery/stylesheet/ui.theme.css"></link>

    <!--
    AHA!  I *knew* you wouldn't be able to resist taking a look here to see how things are setup!
    Good idea - There's a few comments below, but hopefully things are readable as is.

    First thing we do is load in jQuery and the jquery.sparkline plugin
    (incidently you'd normally put all this at the END of your page to speed loading times)
    -->
    <script type="text/javascript" src="../jquery/jquery.min132.js"></script>
    <script type="text/javascript" src="../jquery/ui.core16rc5.js"></script>
    <script type="text/javascript" src="../jquery/ui.tabs16rc5.js"></script>
    <script type="text/javascript" src="../jquery/jquery.sparkline.js"></script>

    <!--
    Then we use jQuery's $(...) handler to define some javascript to run once the page is loaded
    -->
    <script type="text/javascript">
    /* <![CDATA[ */
    var mdraw = 0;
    $(function() {
        var tabs = $('#tabs').tabs();
        $('.ui-tabs-nav').bind('tabsshow', function() { $.sparkline_display_visible(); });

        /** Draw all the example charts on the page **/

        // Bar + line composite charts
        $('#compositebar').sparkline('html', { type: 'bar', barColor: '#aaf' });
        $('#compositebar').sparkline([4,1,5,7,9,9,8,7,6,6,4,7,8,4,3,2,2,5,6,7], { composite: true, fillColor: false, lineColor: 'red' });

        // Line charts taking their values from the tag
        $('.line').sparkline();

        // Larger line charts for the docs
        $('.largeline').sparkline('html', { type: 'line', height: '2.5em', width: '4em' });

        // Customized line chart
        $('#linecustom').sparkline('html', {height: '1.5em', width: '8em', lineColor: '#f00', fillColor: '#ffa', minSpotColor: false, maxSpotColor: false, spotColor: '#77f', spotRadius: 3});

        // Bar charts using inline values
        $('.bar').sparkline('html', {type: 'bar'});

        // Tri-state charts using inline values
        $('.tristate').sparkline('html', {type: 'tristate'});
        $('.tristatecols').sparkline('html', {type: 'tristate', colorMap: {'-2': '#fa7', '2': '#44f'} });

        // Composite line charts, the second using values supplied via javascript
        $('#compositeline').sparkline('html', { fillColor: false });
        $('#compositeline').sparkline([4,1,5,7,9,9,8,7,6,6,4,7,8,4,3,2,2,5,6,7], { composite: true, fillColor: false, lineColor: 'red' });

        // Line charts with normal range marker
        $('#normalline').sparkline('html', { fillColor: false, normalRangeMin: -1, normalRangeMax: 8 });
        $('#normalExample').sparkline('html', { fillColor: false, normalRangeMin: 80, normalRangeMax: 95, normalRangeColor: '#4f4' });

        // Discrete charts
        $('.discrete1').sparkline('html', { type: 'discrete', lineColor: 'blue', xwidth: 18 });
        $('#discrete2').sparkline('html', { type: 'discrete', lineColor: 'blue', thresholdColor: 'red', thresholdValue: 4 });

        // Bullet charts
        $('.bullet').sparkline('html', { type: 'bullet' });

        // Pie charts
        $('.pie').sparkline('html', { type: 'pie', height: '1.0em' });

        // Box plots
        $('.boxplot').sparkline('html', { type: 'box'});
        $('.boxplotraw').sparkline([ 1, 3, 5, 8, 10, 15, 18 ], {type:'box', raw: true, showOutliers:true, target: 6});

        /** Plot the stock indexes and the latest San Francisco Giants results - The data for this is gathered by some Python scripts I have on the server **/
        var nd = [2522.95
,2471.47
,2471.73
,2511.92
,2461.19
,2498.74
,2424.25
,2402.29
,2319.64
,2265.64
,2374.67
,2375.31
,2425.02
,2394.36
,2346.85
,2354.23
,2317.26
,2298.37
,2204.01
,2229.04
,2213.55
,2210.95
,2195.88
,2277.68
,2257.04
,2257.04
,2222.33
,2281.07
,2303.03
,2219.17
];
        var nd_vol = [0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
,0
];
        var dow = [11205.03
,10991.99
,11045.27
,11167.32
,11008.61
,11151.83
,10926.77
,10868.12
,10520.32
,10380.43
,10785.14
,10748.26
,10896.91
,10782.95
,10620.16
,10625.83
,10510.95
,10444.37
,10068.01
,10193.39
,10066.57
,10043.75
,9974.45
,10258.99
,10136.63
,10136.63
,10024.02
,10249.54
,10255.28
,9931.97
];
        var dow_vol = [191924045
,263395987
,236760411
,194312160
,255132491
,178078822
,242096575
,218831496
,459882732
,428725169
,313354000
,221002110
,195372153
,201475028
,256495923
,221910894
,246374123
,266343224
,360348622
,438219485
,211429231
,316964495
,316081112
,264773539
,243723703
,0
,221896377
,200849912
,176866145
,256598987
];
        var giants = [-1,1,1,1,-1,1,-1,-1,-1,-1,-1,1,-1,1,1,1,1,-1,-1,1];
        $('#dow').sparkline(dow_vol, {height: '1.3em', type: 'bar', barSpacing: 0, barWidth: 3, barColor: '#ddd'});
        $('#dow').sparkline(dow, {composite: true, height: '1.3em', fillColor:false, lineColor:'black'});
        $('#nasdaq').sparkline(nd_vol, {height: '1.3em', type: 'bar', barSpacing: 0, barWidth: 3,barColor: '#ddd'});
        $('#nasdaq').sparkline(nd, {composite: true, height: '1.3em', fillColor:false, lineColor:'black'});
        $('#giants').sparkline(giants, {type: 'tristate'});

        /** Handle updating the "try it" graphs form in the examples section **/
        function updateLine() {
            var type = $('#charttype').val();
            var negbarcolor = '';
            var barwidth = '';
            var barspacing = '';
            switch(type) {
                case 'bar':
                    negbarcolor = $('#barnegbarcolor').val();
                    barwidth = parseInt($('#barbarwidth').val());
                    barspacing = parseInt($('#barbarspacing').val());
                    break;
                case 'tristate':
                    negbarcolor = $('#trinegbarcolor').val();
                    barwidth = parseInt($('#tribarwidth').val());
                    barspacing = parseInt($('#tribarspacing').val());
                    break;
            }
            $('#dynamicline').sparkline($('#'+type+'vals').val().split(','),  {
                type: type,
                height: $('#chartheight').val(),
                width: $('#chartwidth').val(),
                lineColor: $('#linecol').val(),
                fillColor: $('#fillcol').val(),
                spotColor: $('#spotcol').val(),
                spotRadius: parseInt($('#spotsize').val()),
                lineWidth: parseFloat($('#linewidth').val()),
                barColor: $('#barcolor').val(),
                posBarColor: $('#posbarcolor').val(),
                negBarColor: negbarcolor,
                zeroBarColor: $('#zerobarcolor').val(),
                zeroColor: $('#zerocolor').val() || undefined,
                barWidth: barwidth,
                barSpacing: barspacing,
                lineHeight: parseInt($('#lineheight').val()) || undefined,
                thresholdValue: parseInt($('#thresholdvalue').val()),
                thresholdColor: $('#thresholdcolor').val(),
                targetColor: $('#targetcolor').val(),
                performanceColor: $('#performancecolor').val(),
                rangeColors: $('#rangecolors').val().split(','),
                targetWidth: parseInt($('#targetwidth').val()),
                sliceColors: $('#slicecolors').val().split(','),
                boxLineColor: $('#boxlinecol').val(),
                boxFillColor: $('#boxfillcol').val(),
                whiskerColor: $('#whiskercol').val(),
                outlierLineColor: $('#outlierlinecol').val(),
                outlierFillColor: $('#outlierfillcol').val(),
                medianColor: $('#mediancol').val(),
                showOutliers: $('#showoutliers').attr('checked'),
                outlierIQR: parseFloat($('#outlieriqr').val()),
                target: parseFloat($('#boxtarget').val())
                });
            $('.coptions').hide();
            $('.'+type+'options').show();
            if ($.browser.msie) 
                $('input').hide().show(); // workaround weird ie layout glitch
            return false;
        }
        updateLine();
        $('#dynform input').change(updateLine);
        $('#dynform select').change(updateLine);
        $('#dynform').submit(updateLine);

        /** 
        ** Draw the little mouse speed animated graph
        ** This just attaches a handler to the mousemove event to see
        ** (roughly) how far the mouse has moved
        ** and then updates the display a couple of times a second via
        ** setTimeout()
        **/
        var mrefreshinterval = 500; // update display every 500ms
        var lastmousex=-1; 
        var lastmousey=-1;
        var lastmousetime;
        var mousetravel = 0;
        var mpoints = [];
        var mpoints_max = 30;
        $('body').mousemove(function(e) {
            var mousex = e.pageX;
            var mousey = e.pageY;
            if (lastmousex > -1)
                mousetravel += Math.max( Math.abs(mousex-lastmousex), Math.abs(mousey-lastmousey) );
            lastmousex = mousex;
            lastmousey = mousey;
        });
        mdraw = function() {
            var md = new Date();
            var timenow = md.getTime();
            if (lastmousetime && lastmousetime!=timenow) {
                var pps = Math.round(mousetravel / (timenow - lastmousetime) * 1000);
                mpoints.push(pps);
                if (mpoints.length > mpoints_max)
                    mpoints.splice(0,1);
                mousetravel = 0;
                $('#mousespeed').sparkline(mpoints, { width: mpoints.length*2 });
            }
            lastmousetime = timenow;
            mtimer = setTimeout(mdraw, mrefreshinterval);
        }
        var mtimer = setTimeout(mdraw, mrefreshinterval); // We could use setInterval instead, but I prefer to do it this way
        $.sparkline_display_visible(); 
        $('#simplelink')[0].target = '_blank';

    });
    function switchtab(tabnum) {
        $('#tabs').tabs('select', tabnum);
    }
    /* ]]> */
    </script>
</head>
<body>

<div id="container">


    <h1><span>jQuery Sparklines</span></h1>


    <div id="examples">
        <a name="examples"></a><h2><span>Examples</span></h2>
        <div id="ex2">
            <p>
                Pie charts <span class="pie">1,1,2</span> <span class="pie">1,5</span> <span class="pie">20,50,80</span>
            </p>
            <p>
                Bullet charts<br />
                <span class="bullet">10,12,12,9,7</span><br />
                <span class="bullet">14,12,12,9,7</span><br />
                <span class="bullet">10,12,14,9,7</span><br />
            </p>

            <form id="dynform" action="#">
            <div class=".customize" id="customize">
                <h3>Try It Out</h3>
                <p id="customresult"><span id="dynamicline">Loading..</span></p>
                <ul>
                    <li>Chart type: <select name="charttype" id="charttype">
                        <option value="line" selected="selected">Line</option>
                        <option value="bar">Bar</option>
                        <option value="tristate">Tristate</option>
                        <option value="discrete">Discrete</option>
                        <option value="bullet">Bullet</option>
                        <option value="pie">Pie</option>
                        <option value="box">Box Plot</option>
                        </select></li>
                    <li class="coptions lineoptions">Values: <input id="linevals" type="text" size="20" value="5,6,7,9,9,5,3,2,2,4,6,7" /></li>
                    <li class="coptions baroptions">Values: <input id="barvals" type="text" size="20" value="5,6,7,2,0,-4,-2,4" /></li>
                    <li class="coptions bulletoptions">Values: <input id="bulletvals" type="text" size="20" value="10,12,12,9,7" /></li>
                    <li class="coptions tristateoptions">Values: <input id="tristatevals" type="text" size="20" value="-1,1,1,2,0,-1,-2,1,1" /></li>
                    <li class="coptions discreteoptions">Values: <input id="discretevals" type="text" size="20" value="5,6,7,9,9,5,3,2,2,4,6,7" /></li>
                    <li class="coptions pieoptions">Values: <input id="pievals" type="text" size="20" value="1,2,4" /></li>
                    <li class="coptions boxoptions">Values: <input id="boxvals" type="text" size="20" value="4,27,34,52,54,59,61,68,78,82,85,87,91,93,100" /></li>
                    <li>Height: <input id="chartheight" type="text" size="10" value="auto" /> (css units; try 50px for pixels</li>
                    <li>Width: <input id="chartwidth" type="text" size="10" value="auto" /> or 2em for double the font size)</li>
                 </ul>
                 <ul class="coptions lineoptions discreteoptions">
                    <li>Line Colour: <input id="linecol" type="text" size="10" value="#00f" /></li>
                    <li>Fill Colour: <input id="fillcol" type="text" size="10" value="#cdf" /></li>
                </ul>
                <ul class="coptions lineoptions">
                    <li>Spot Colour: <input id="spotcol" type="text" size="10" value="#f80" /></li>
                    <li>Spot Size: <input id="spotsize" type="text" size="10" value="2" /> (in pixels)</li>
                    <li>Line Width: <input id="linewidth" type="text" size="10" value="1" /> (in pixels)</li>
                </ul>
                <ul class="coptions baroptions">
                    <li>Bar Color: <input id="barcol" type="text" size="10" value="#00f" /></li>
                    <li>Negative Bar Color: <input id="barnegbarcol" type="text" size="10" value="#f44" /></li>
                    <li>Zero Color: <input id="zerocol" type="text" size="10" value="" /></li>
                    <li>Bar Width: <input id="barbarwidth" type="text" size="10" value="4" /></li>
                    <li>Bar Spacing: <input id="barbarspacing" type="text" size="10" value="1" /></li>
                </ul>
                <ul class="coptions tristateoptions">
                    <li>Positive Bar Color: <input id="posbarcol" type="text" size="10" value="#6f6" /></li>
                    <li>Negative Bar Color: <input id="trinegbarcol" type="text" size="10" value="#f44" /></li>
                    <li>Zero Bar Color: <input id="zerobarcol" type="text" size="10" value="#999" /></li>
                    <li>Bar Width: <input id="tribarwidth" type="text" size="10" value="4" /></li>
                    <li>Bar Spacing: <input id="tribarspacing" type="text" size="10" value="1" /></li>
                </ul>
                <ul class="coptions discreteoptions">
                    <li>Line Height: <input id="lineheight" type="text" size="10" value="" /></li>
                    <li>Threshold Value: <input id="thresholdvalue" type="text" size="10" value="5" /></li>
                    <li>Threshold Color: <input id="thresholdcolor" type="text" size="10" value="#f55" /></li>
                </ul>
                <ul class="coptions bulletoptions">
                    <li>Performance Color: <input id="performancecolor" type="text" size="10" value="blue" /></li>
                    <li>Range Colors: <input id="rangecolors" type="text" size="25" value="#D3DAFE,#A8B6FF,#7F94FF" /></li>
                    <li>Target Width: <input id="targetwidth" type="text" size="10" value="3" /></li>
                </ul>
                <ul class="coptions pieoptions">
                    <li>Slice Colors: <input id="slicecolors" type="text" size="25" value="#f00,#0f0,#00f" /></li>
                </ul>
                <ul class="coptions boxoptions">
                    <li>Box Line Color: <input id="boxlinecol" type="text" size="10" value="black" /></li>
                    <li>Box Fill Color: <input id="boxfillcol" type="text" size="10" value="#cdf" /></li>
                    <li>Whisker Color: <input id="whiskercol" type="text" size="10" value="black" /></li>
                    <li>Outlier Line Color: <input id="outlierlinecol" type="text" size="10" value="#333" /></li>
                    <li>Outlier Fill Color: <input id="outlierfillcol" type="text" size="10" value="white" /></li>
                    <li>Median Color: <input id="mediancol" type="text" size="10" value="red" /></li>
                    <li>Show Outliers: <input id="showoutliers" type="checkbox" checked="checked" /></li>
                    <li>Outlier IQR: <input id="outlieriqr" type="text" size="4" value="1.5" /></li>
                    <li>Target: <input id="boxtarget" type="text" size="10" value="" /></li>
                </ul>
                <ul class="coptions boxoptions bulletoptions">
                    <li>Target Color: <input id="targetcolor" type="text" size="10" value="#4a2" /></li>
                </ul>
            </div>
            </form>
        </div>
        <div id="ex1">
            <p>
                Mouse speed <span id="mousespeed">Loading..</span>
            </p>
            <p>
                Inline <span class="line">10,8,9,3,5,8,5</span> line graphs <span class="line">8,4,0,0,0,0,1,4,4,10,10,10,10,0,0,0,4,6,5,9,10</span>
            </p>

            <p>
                Bar charts <span class="bar">10,8,9,3,5,8,5</span> negative values: <span class="bar">-3,1,2,0,3,-1</span>
            </p>

            <p>
                Composite inline <span id="compositeline">8,4,0,0,0,0,1,4,4,10,10,10,10,0,0,0,4,6,5,9,10</span>
            </p>
            <p>
                Inline with normal range <span id="normalline">8,4,0,0,0,0,1,4,4,10,10,10,10,0,0,0,4,6,5,9,10</span>
            </p>
            <p>
                Composite bar <span id="compositebar">4,6,7,7,4,3,2,1,4</span>
            </p>
            <p>
                Discrete <span class="discrete1">4,6,7,7,4,3,2,1,4,4,5,6,7,6,6,2,4,5</span><br />
                Discrete with threshold <span id="discrete2">4,6,7,7,4,3,2,1,4</span>
            </p>

            <p>
                Customize size and colours <span id="linecustom">10,8,9,3,5,8,5,7</span>
            </p>
            <p>
                Tristate charts 
                <span class="tristate">1,1,0,1,-1,-1,1,-1,0,0,1,1</span><br />
                (think games won, lost or drawn)
            </p>
            <p>
                Tristate chart using a colour map: <span class="tristatecols">1,2,0,2,-1,-2,1,-2,0,0,1,1</span>
            </p>
            <p>
                Box Plot: <span class="boxplot">4,27,34,52,54,59,61,68,78,82,85,87,91,93,100</span><br />
                Pre-computed box plot <span class="boxplotraw">Loading..</span>
            </p>

        </div>


 
        <a name="syntax"></a><h3>Syntax</h3>
        <pre>
$(selector).sparkline(values, options);
        </pre>

        <p>
            Values can either be an array of numbers or "html" which causes the values to be read from from the selected tag:
        </p>

        <pre>
&lt;span class="sparklines"&gt;1,2,3,4,5,4,3,2,1&lt;/span&gt;
&lt;span id="ticker""&gt;Loading..&lt;/span&gt;

$('.sparklines').sparkline('html');
$('#ticker').sparkline([1,2,3,4,5,4,3,2,1]);
        </pre>

        <p>
            Options is an object that specifies the type of sparkline to draw, colours to use, etc
        </p>

        <pre>
$('#barchart').sparkline(myvalues, { type:'bar', barColor:'green' });
        </pre>

        <a name="common"></a><h3>Common Options</h3>
        <ul>
            <li><b>type</b> - line (default), bar, tristate, discrete, bullet, pie or box</li>
            <li><b>width</b> - Width of the chart - Defaults to 'auto' - May be any valid css width - 1.5em, 20px, etc (using a number without a unit specifier won't do what you want) - This option does nothing for bar and tristate chars (see barWidth)</li>
            <li><b>height</b> - Height of the chart - Defaults to 'auto' (line height of the containing tag)</li>
            <li><b>lineColor</b> - Used by line and discrete charts</li>
            <li><b>fillColor</b> - Set to false to disable fill.</li>
            <li><b>chartRangeMin</b> - Specify the minimum value to use for the range of the chart - Defaults to the minimum value supplied</li>
            <li><b>chartRangeMax</b> - Specify the maximum value to use for the range of the chart - Defaults to the maximum value supplied</li>
            <li><b>composite</b> - If true then don't erase any existing chart attached to the tag, but draw
                       another chart over the top - Note that width and height are ignored if an
                       existing chart is detected.</li>
        </ul>

        <a name="hidden"></a><h3>Hidden Sparklines</h3>
        <p>
                If you try to display a sparkline in a tag that's currently not visible (ie. the tag or one of its parents
                are set to display:none) then you'll find that the sparkline hasn't been rendered when you finally
                make the tag visisble.  This is because a hidden tag has no size so we can't detect the area to draw on.
        </p>
        <p>
            The solution is to call the <b>$.sparkline_display_visible()</b> function anytime a sparkline may have become visible
            so that it can be correctly rendered.  This is the technique this site uses to handle the sparklines that are hidden
            in the different tabbed sections.
        </p>

        <a name="line"></a><h3>Line Chart Options</h3>
        <div class="docdemo">
            <span class="line">8,4,0,0,0,0,1,4,4,10,10,10,10,0,0,0,4,6,5,9,10</span>
        </div>
        <p>
            Line charts are the default chart type, but to specify the type explicitly  set an option called "type" to "line".
        </p>
        <ul>
            <li><b>defaultPixelsPerValue</b> - Defaults to 3 pixels of width for each value in the chart</li>
            <li><b>spotColor</b> - Set to false or an empty string to hide the final value marker</li>
            <li><b>minSpotColor</b> - Set to false or an empty string to hide the minimum value marker</li>
            <li><b>maxSpotColor</b> - Set to false or an empty string to hide the maximum value marker</li>
            <li><b>spotRadius</b> - In pixels (default: 1.5)</li>
            <li><b>lineWidth</b> - In pixels (default: 1)</li>
            <li><b>normalRangeMin, normalRangeMax</b> Specify threshold values between which to draw a bar to denote the "normal" or expected range of values.
                For example the green bar here <span id="normalExample">80,85,84,88,98,114,116,104,95,85,84</span> might denote a normal
                operating temperature range.</li>
            <li><b>xvalues</b> - See below</li>
            <li><b>chartRangeClip</b> - If true then the y values supplied to plot will be clipped to fall between chartRangeMin and chartRangeMax - By default chartRangeMin/Max just ensure that the chart spans at least that range of values, but does not constrain it</li>
            <li><b>chartRangeMinX</b> - Specifies the minimum value to use for the X value of the charge</li>
            <li><b>chartRangeMaxX</b> - Specifies the maximum value to use for the X value of the charge</li>
        </ul>
        <p>
        By default the values supplied to line charts are presumed to be y values mapping on to sequential (integer) x values.
        If you need to specify both the x and y values for your chart, you have a few options:
        </p>
        <ol>
          <li><b>Inline:</b> x and y values are separated by a colon:  x:y,x:y,x:y - eg. &lt;span class="linechart"&gt;1:3,2.7:4,4.8:3&lt;/span&gt;</li>
          <li><b>Array of arrays:</b> An array of [x,y] arrays: $('#linechart').sparkline([ [1,3], [2.7,4], [4.8,3] ]);</li>
          <li><b>Separate arrays:</b> Pass x values separately: $('#linechart').sparkline([3,4,3], { xvalues: [1,2.7,4.8]});</li>
        </ol>
        <p>
        You can also specify a value of "null" to omit values from the chart completely. eg:<br>
        &lt;span class="linechart"&gt;1,2,3,null,3,4,2&lt;/span&gt; becomes:<br>
        <span class="largeline">1,2,3,null,3,4,2</span>
        </p>

        <a name="bar"></a><h3>Bar Chart Options</h3>
        <div class="docdemo">
            <span class="bar">10,8,9,3,5,8,5</span><br /><br />
            <span class="bar">-3,1,2,0,3,-1</span><br /><br />
            <span class="bar">1,3,4,null,3,2,4</span>
        </div>
        <p>
        Set the "type" option to "bar" to generate bar charts.  Values can be omitted by using the "null" value instead of a number.
        </p>
        <ul>
            <li><b>barColor</b> - Colour used for postive values</li>
            <li><b>negBarColor</b> - Colour used for negative values</li>
            <li><b>zeroColor</b> - Colour used for values equal to zero</li>
            <li><b>nullColor</b> - Colour used for values equal to null - By default null values are omitted entirely, but setting this adds a thin marker for the entry - This can be useful if your chart is pretty sparse; perhaps try setting it to a light grey or something equally unobtrusive</li>
            <li><b>barWidth</b> - Width of each bar, in pixels</li>
            <li><b>barSpacing</b> - Space between each bar, in pixels</li>
            <li><b>zeroAxis</b> - Centers the y-axis at zero if true (default is to automatically do the right thing)</li>
            <li><b>colorMap</b> - Map override colors to certain values - For example if you want all values of -2 to appear yellow, use colorMap: { '-2': '#ff0' }.  As of version 1.5 you may also pass an Array of values here instead of a mapping to specifiy a color for each individual bar.  For example if your chart has three values 1,3,1 you can set colorMap=["red", "green", "blue"]</li>
        </ul>

        <a name="tristate"></a><h3>Tristate Chart Options</h3>
        <div class="docdemo">
            <span class="tristate">1,1,0,1,-1,-1,1,-1,0,0,1,1</span>
        </div>
        <p>
        Set the "type" option to "tristate" to generate tristate charts.
        </p>
        <ul>
            <li><b>posBarColor</b> - Colour for positive (win) values</li>
            <li><b>negBarColor</b> - Colour for negative (lose) values</li>
            <li><b>zeroBarColor</b> - Colour for zero (draw) values</li>
            <li><b>barWidth</b> - Width of each bar, in pixels</li>
            <li><b>barSpacing</b> - Space between each bar, in pixels</li>
            <li><b>zeroAxis</b> - Centers the y-axis at zero if true (default is to automatically do the right thing)</li>
            <li><b>colorMap</b> - Map override colors to certain values - For example if you want all values of -2 to appear yellow, use colorMap: { '-2': '#ff0' }.  As of version 1.5 you may also pass an Array of values here instead of a mapping to specifiy a color for each individual bar.  For example if your chart has three values 1,3,1 you can set colorMap=["red", "green", "blue"]</li>
        </ul>

        <a name="discrete"></a><h3>Discrete Chart Options</h3>
        <div class="docdemo">
            <span class="discrete1">4,6,7,7,4,3,2,1,4,4,5,6,7,6,6,2,4,5</span>
        </div>
        <p>
        Set the "type" option to "discrete" to generate discrete charts.
        </p>
        <ul>
            <li><b>lineHeight</b> - Height of each line in pixels - Defaults to 30% of the graph height</li>
            <li><b>thesholdValue</b> - Values less than this value will be drawn using thresholdColor instead of lineColor</li>
            <li><b>thresholdColor</b></li>
        </ul>
                
        <a name="bullet"></a><h3>Bullet Graph Options</h3>
        <div class="docdemo">
            <span class="bullet">10,12,12,9,7</span>
        </div>
        <p>
        Set the "type" option to "bullet" to generate bullet graphs.
        </p>
        <p>
        <i>See the <a href="http://en.wikipedia.org/wiki/Bullet_graph">wikipedia page</a> for more information on Bullet graphs.<br />
        Supplied values must be in this order: target, performance, range1, range2, range3, ...</i>
        </p>
        <ul>
            <li><b>targetColor</b> - The colour of the vertical target marker</li>
            <li><b>targetWidth</b> - The width of the target marker in pixels</li>
            <li><b>performanceColor</b> - The color of the performance measure horizontal bar</li>
            <li><b>rangeColors</b> - Colors to use for each qualitative range background color</li>
        </ul>

        <a name="pie"></a><h3>Pie Chart Options</h3>
        <div class="docdemo">
            <span class="pie">1,1,2</span><br />
            <span class="pie">1,5</span><br />
            <span class="pie">20,50,80</span>
        </div>
        <p>
            Set the "type" option to "pie" to generate pie charts.
        </p>
        <p>
        <i>These little pie charts tend only to be useful with 2 or 3 values at most</i>
        </p>
        <ul>
            <li><b>sliceColors</b> - An array of colors to use for pie slices</li>
            <li><b>offset</b> - Angle in degrees to offset the first slice - Try -90 or +90</li>
        </ul>

        <a name="boxplot"></a><h3>Box Plot Options</h3>
        <div class="docdemo">
            <span class="boxplot">4,27,34,52,54,59,61,68,78,82,85,87,91,93,100</span><br />
            <span class="boxplotraw">Loading..</span><br />
        </div>
        <p>
        <i>See the <a href="http://en.wikipedia.org/wiki/Box_plot">wikipedia page</a> for more information on Box plots</i>
        </p>
        <ul>
          <li><b>raw</b> - If set to false (default) then the values supplied are used to caculate the box data points for you.  If true then you must pre-calculate the points (see below)</li>
          <li><b>showOutliers</b> - If true (default) then outliers (values &gt; 1.5x the IQR) are marked with circles and the whiskers are placed at Q1 and Q3 instead of the least and greatest value</li>
          <li><b>outlierIQR</b> - Set the inter-quartile range multipler used to calculate values that qualify as an outlier - Defaults to 1.5x</li>
          <li><b>boxLineColor</b> - Line colour used to outline the box</li>
          <li><b>boxFillColor</b> - Fill colour used for the box</li>
          <li><b>whiskerColor</b> - Colour used to draw the whiskers</li>
          <li><b>outlierLineColor</b> - Colour used to draw the outlier circles</li>
          <li><b>outlierFillColor</b> - Colour used to fill the outlier circles</li>
          <li><b>spotRadius</b> - Radius to draw the outlier circles</li>
          <li><b>medianColor</b> - Colour used to draw the median line</li>
          <li><b>target</b> - If set to a value, then a small crosshair is drawn at that point to represent a target value</li>
          <li><b>targetColor</b> - Colour used to draw the target crosshair, if set</li>
          <li><b>minValue</b> - If minvalue and maxvalue are set then the scale of the plot is fixed.  By default minValue and maxValue are deduced from the values supplied</li>
          <li><b>maxValue</b> - See minValue</li>
        </ul>
        <p>
          Set the "type" option to "box" to generate box plots.
        </p>
        <p>
          As noted in the options above, by default "raw" is set to false.  This means that you can just pass an arbitrarily long list of values to the sparkline
          function and the corresponding box plot will be calculated from those values.  This is probably the behaviour you want most of the time.
        </p>
        <p>
          If, on the other hand, you have thousands of values to deal with you may want to pre-compute the points needed for the box plot.  In that case, set raw=true and pass in
          the computed values.  If showing outliers, supplied values of:<br />
            <i>low_outlier, low_whisker, q1, median, q3, high_whisker, high_outlier</i><br />
        Omit the outliers and set showOutliers to false to omit outlier display.
        </p>


        <a name="license"></a><h3>License</h3>
        <p>
            This plugin is copyright <a href="http://www.splunk.com/">Splunk Inc</a> and licensed using
            the <a href="http://www.opensource.org/licenses/bsd-license.php">New BSD License</a>
        </p>
    </div>

</div>

</body>
</html>
